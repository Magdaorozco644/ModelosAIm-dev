{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fad936de-3bac-492f-bbc4-a6959c5205d1",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import boto3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ea967389-2758-4a57-86f6-e833d9b4d41e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from io import StringIO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b732f32c-e12b-4c9f-8891-22209c98dd83",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set up S3 client\n",
    "client = boto3.client('s3')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "37b6177b-9077-493a-80c0-78fc5ea564de",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "bucket_name = 'viamericas-datalake-dev-us-east-1-283731589572-analytics'\n",
    "folder_name = 'level_country_10_09_2023/' # Folder under analysis\n",
    "path = f'Forecast/Forecast_analysis/{folder_name}'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "56b977bb-18e5-43fc-9558-0a7dfbaad192",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Listing objects \n",
    "elements = client.list_objects(Bucket=bucket_name, Prefix=path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "87775d27-1395-44e9-b011-571821bd95d7",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Initialize an empty list \n",
    "dfs = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8ba4fc5e-2f40-4000-b169-333b360fe4fd",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Forecast/Forecast_analysis/level_country_10_09_2023/level_country_10_09_2023_2d_v2_export_2024-01-23T19-51-05Z_part0.csv\n",
      "Forecast/Forecast_analysis/level_country_10_09_2023/level_country_10_09_2023_2d_v2_export_2024-01-23T19-51-05Z_part1.csv\n",
      "Forecast/Forecast_analysis/level_country_10_09_2023/level_country_10_09_2023_2d_v2_export_2024-01-23T19-51-05Z_part2.csv\n",
      "Forecast/Forecast_analysis/level_country_10_09_2023/level_country_10_09_2023_2d_v2_export_2024-01-23T19-51-05Z_part3.csv\n"
     ]
    }
   ],
   "source": [
    "file_prefix_name = 'level_country_10_09_2023_2d_v2_export'\n",
    "\n",
    "# Iterate through each CSV in the S3 path\n",
    "for obj in elements.get('Contents', []):\n",
    "#    print(obj)\n",
    "    # Check if the object is a CSV file\n",
    "    if obj['Key'].endswith('.csv') and file_prefix_name in obj['Key']: # To process only correct data\n",
    "        # Read CSV content from S3\n",
    "        response = client.get_object(Bucket=bucket_name, Key=obj['Key'])\n",
    "        print(obj['Key'])\n",
    "        csv_content = response['Body'].read().decode('utf-8')\n",
    "\n",
    "        # Transform CSV content to df\n",
    "        df = pd.read_csv(StringIO(csv_content))\n",
    "\n",
    "        dfs.append(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c3d36fed-4464-4b36-a65f-5e397f8cdfda",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "final_df = pd.concat(dfs, ignore_index=True).drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e1b8b072-9a5c-4168-943f-f0f8f5df168d",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_df['date'] = pd.to_datetime(final_df['date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "684c08ba-9411-4001-b8fd-9508c3be2c07",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 92 entries, 0 to 91\n",
      "Data columns (total 7 columns):\n",
      " #   Column   Non-Null Count  Dtype              \n",
      "---  ------   --------------  -----              \n",
      " 0   item_id  92 non-null     object             \n",
      " 1   date     92 non-null     datetime64[ns, UTC]\n",
      " 2   p5       92 non-null     float64            \n",
      " 3   p10      92 non-null     float64            \n",
      " 4   p50      92 non-null     float64            \n",
      " 5   p90      92 non-null     float64            \n",
      " 6   mean     92 non-null     float64            \n",
      "dtypes: datetime64[ns, UTC](1), float64(5), object(1)\n",
      "memory usage: 5.2+ KB\n"
     ]
    }
   ],
   "source": [
    "final_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "b001151a-4094-4a8e-8b22-567e3e1f4e9e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "46"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df['item_id'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "36500cae-ca2a-473e-803c-8f7d6d3869f1",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([datetime.date(2023, 9, 11), datetime.date(2023, 9, 12)],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df['date'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "84babe75-75b5-479c-99ed-352aa324b288",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "final_df.rename(columns={'item_id':'country'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "c04de810-99da-44e9-a8b0-e1414d253ea9",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_200/4020991133.py:2: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  final_df = final_df.applymap(lambda x: x.upper() if isinstance(x, str) else x)\n"
     ]
    }
   ],
   "source": [
    "# Applying UPPER to the entire df\n",
    "final_df = final_df.applymap(lambda x: x.upper() if isinstance(x, str) else x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "7efb78e2-f80d-451f-bd34-241865ef46c9",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "final_df = final_df[['date','country','p5','p10','p50','p90','mean']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "68e2c7c4-eebc-4c82-98b6-9e2a53752d10",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>country</th>\n",
       "      <th>p5</th>\n",
       "      <th>p10</th>\n",
       "      <th>p50</th>\n",
       "      <th>p90</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>84</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>ARGENTINA</td>\n",
       "      <td>-19.538956</td>\n",
       "      <td>112.336150</td>\n",
       "      <td>577.526870</td>\n",
       "      <td>1042.717590</td>\n",
       "      <td>577.526870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>2023-09-12</td>\n",
       "      <td>ARGENTINA</td>\n",
       "      <td>-60.345856</td>\n",
       "      <td>71.557792</td>\n",
       "      <td>536.849197</td>\n",
       "      <td>1002.140602</td>\n",
       "      <td>536.849197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>BANGLADESH</td>\n",
       "      <td>-9543.450624</td>\n",
       "      <td>-6645.986391</td>\n",
       "      <td>3574.846954</td>\n",
       "      <td>13795.680299</td>\n",
       "      <td>3574.846954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2023-09-12</td>\n",
       "      <td>BANGLADESH</td>\n",
       "      <td>-10651.039454</td>\n",
       "      <td>-7508.939894</td>\n",
       "      <td>3574.846954</td>\n",
       "      <td>14658.633802</td>\n",
       "      <td>3574.846954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>BELGIUM</td>\n",
       "      <td>-434.868319</td>\n",
       "      <td>-275.270069</td>\n",
       "      <td>287.714315</td>\n",
       "      <td>850.698699</td>\n",
       "      <td>287.714315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2023-09-12</td>\n",
       "      <td>UNITED STATES</td>\n",
       "      <td>58071.182331</td>\n",
       "      <td>69515.564646</td>\n",
       "      <td>109885.734899</td>\n",
       "      <td>150255.905152</td>\n",
       "      <td>109885.734899</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>UNITED STATES (ATM &amp; DEPOSITS)</td>\n",
       "      <td>-4909.051458</td>\n",
       "      <td>-3580.937678</td>\n",
       "      <td>1103.996635</td>\n",
       "      <td>5788.930948</td>\n",
       "      <td>1103.996635</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>2023-09-12</td>\n",
       "      <td>UNITED STATES (ATM &amp; DEPOSITS)</td>\n",
       "      <td>-5700.624516</td>\n",
       "      <td>-4372.121898</td>\n",
       "      <td>314.184045</td>\n",
       "      <td>5000.489988</td>\n",
       "      <td>314.184045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>URUGUAY</td>\n",
       "      <td>-326.540243</td>\n",
       "      <td>-251.805577</td>\n",
       "      <td>11.821687</td>\n",
       "      <td>275.448950</td>\n",
       "      <td>11.821687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2023-09-12</td>\n",
       "      <td>URUGUAY</td>\n",
       "      <td>-326.586553</td>\n",
       "      <td>-251.851885</td>\n",
       "      <td>11.775384</td>\n",
       "      <td>275.402653</td>\n",
       "      <td>11.775384</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>92 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          date                         country            p5           p10  \\\n",
       "84  2023-09-11                       ARGENTINA    -19.538956    112.336150   \n",
       "85  2023-09-12                       ARGENTINA    -60.345856     71.557792   \n",
       "14  2023-09-11                      BANGLADESH  -9543.450624  -6645.986391   \n",
       "15  2023-09-12                      BANGLADESH -10651.039454  -7508.939894   \n",
       "60  2023-09-11                         BELGIUM   -434.868319   -275.270069   \n",
       "..         ...                             ...           ...           ...   \n",
       "19  2023-09-12                   UNITED STATES  58071.182331  69515.564646   \n",
       "62  2023-09-11  UNITED STATES (ATM & DEPOSITS)  -4909.051458  -3580.937678   \n",
       "63  2023-09-12  UNITED STATES (ATM & DEPOSITS)  -5700.624516  -4372.121898   \n",
       "20  2023-09-11                         URUGUAY   -326.540243   -251.805577   \n",
       "21  2023-09-12                         URUGUAY   -326.586553   -251.851885   \n",
       "\n",
       "              p50            p90           mean  \n",
       "84     577.526870    1042.717590     577.526870  \n",
       "85     536.849197    1002.140602     536.849197  \n",
       "14    3574.846954   13795.680299    3574.846954  \n",
       "15    3574.846954   14658.633802    3574.846954  \n",
       "60     287.714315     850.698699     287.714315  \n",
       "..            ...            ...            ...  \n",
       "19  109885.734899  150255.905152  109885.734899  \n",
       "62    1103.996635    5788.930948    1103.996635  \n",
       "63     314.184045    5000.489988     314.184045  \n",
       "20      11.821687     275.448950      11.821687  \n",
       "21      11.775384     275.402653      11.775384  \n",
       "\n",
       "[92 rows x 7 columns]"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df.sort_values(['country', 'date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b660111d-5685-4bb8-9c28-cdfb28147043",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ddcd6d44-bb80-4c08-882a-1d7ae6475ce4",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#pip install pyathena"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "25f62486-7671-4856-bb28-effc08347723",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from pyathena import connect"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "6565d184-bfc6-40dc-97ec-7e88b6a817c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# DB Setting\n",
    "bucket_name = 's3://viamericas-datalake-dev-us-east-1-283731589572-athena/'\n",
    "origin_name = 'AwsDataCatalog'\n",
    "database_name= 'analytics'\n",
    "table_name = 'daily_check'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "05035f79-37dd-46e6-bc51-1253f37b1969",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_200/3276710735.py:4: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
      "  df_check = pd.read_sql(f'SELECT * FROM {origin_name}.{database_name}.{table_name};', conn)\n"
     ]
    }
   ],
   "source": [
    "#Connection\n",
    "conn = connect(s3_staging_dir=f'{bucket_name}queryresults/',\n",
    "               region_name='us-east-1')\n",
    "df_check = pd.read_sql(f'SELECT * FROM {origin_name}.{database_name}.{table_name};', conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "3951fe0d-2552-4d51-b3ad-7dc714e1c4a1",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25110624454.4149"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_check['amount'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "029d5f61-7071-4802-b605-f69dbefada5d",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_check = df_check[df_check['amount'] != 0 ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "e5d325b4-4619-4c5a-8314-1529bd683abd",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_200/2375447846.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_check['date'] = pd.to_datetime(df_check['date'])\n"
     ]
    }
   ],
   "source": [
    "df_check['date'] = pd.to_datetime(df_check['date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "6f5562b4-fb53-4592-bc3e-3e57b13f7d99",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "61620262.760000005"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_dates = ['2023-09-11', '2023-09-12'] # Las fechas que voy a estar pronosticando\n",
    "\n",
    "df_check[df_check['date'].isin(selected_dates)]['amount'].sum() # EL MONTO TOTAL DE ESOS DIAS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "b590a514-3871-4487-ac93-a49c6df5204a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 28289 entries, 0 to 29264\n",
      "Data columns (total 3 columns):\n",
      " #   Column   Non-Null Count  Dtype         \n",
      "---  ------   --------------  -----         \n",
      " 0   date     28289 non-null  datetime64[ns]\n",
      " 1   country  28289 non-null  object        \n",
      " 2   amount   28289 non-null  float64       \n",
      "dtypes: datetime64[ns](1), float64(1), object(1)\n",
      "memory usage: 884.0+ KB\n"
     ]
    }
   ],
   "source": [
    "df_check.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "18906a50-6475-4c39-81ac-32b7d89c1f21",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_check = df_check.groupby(['date', 'country']).agg({'amount': 'sum'}).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "01102a07-0ca0-4293-a337-b84bb61b93d4",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25110624454.4149"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_check['amount'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "ab0fcdcc-2215-4c13-a448-013df95a8c59",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>country</th>\n",
       "      <th>amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-12-31</td>\n",
       "      <td>ARGENTINA</td>\n",
       "      <td>70.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-12-31</td>\n",
       "      <td>BOLIVIA</td>\n",
       "      <td>2942.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-12-31</td>\n",
       "      <td>BRAZIL</td>\n",
       "      <td>261712.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-12-31</td>\n",
       "      <td>CHILE</td>\n",
       "      <td>30.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-12-31</td>\n",
       "      <td>COLOMBIA</td>\n",
       "      <td>116112.14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        date    country     amount\n",
       "0 2020-12-31  ARGENTINA      70.00\n",
       "1 2020-12-31    BOLIVIA    2942.00\n",
       "2 2020-12-31     BRAZIL  261712.33\n",
       "3 2020-12-31      CHILE      30.00\n",
       "4 2020-12-31   COLOMBIA  116112.14"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_check.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "d52e3373-7a7b-4659-bb8f-e46ce6d0ccd4",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_forecast = pd.merge(final_df, df_check, on=['date', 'country'], how='inner').sort_values(['country','date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "57935b4b-1d1c-4ddb-8658-c159c756d293",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['date', 'country', 'p5', 'p10', 'p50', 'p90', 'mean', 'amount'], dtype='object')"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_forecast.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "c719d232-a227-4738-9d4f-37afa8c836fb",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>country</th>\n",
       "      <th>p5</th>\n",
       "      <th>p10</th>\n",
       "      <th>p50</th>\n",
       "      <th>p90</th>\n",
       "      <th>mean</th>\n",
       "      <th>amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>ARGENTINA</td>\n",
       "      <td>-19.538956</td>\n",
       "      <td>112.336150</td>\n",
       "      <td>577.526870</td>\n",
       "      <td>1042.717590</td>\n",
       "      <td>577.526870</td>\n",
       "      <td>708.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>2023-09-12</td>\n",
       "      <td>ARGENTINA</td>\n",
       "      <td>-60.345856</td>\n",
       "      <td>71.557792</td>\n",
       "      <td>536.849197</td>\n",
       "      <td>1002.140602</td>\n",
       "      <td>536.849197</td>\n",
       "      <td>130.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>BANGLADESH</td>\n",
       "      <td>-9543.450624</td>\n",
       "      <td>-6645.986391</td>\n",
       "      <td>3574.846954</td>\n",
       "      <td>13795.680299</td>\n",
       "      <td>3574.846954</td>\n",
       "      <td>7110.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2023-09-12</td>\n",
       "      <td>BANGLADESH</td>\n",
       "      <td>-10651.039454</td>\n",
       "      <td>-7508.939894</td>\n",
       "      <td>3574.846954</td>\n",
       "      <td>14658.633802</td>\n",
       "      <td>3574.846954</td>\n",
       "      <td>198.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>BOLIVIA</td>\n",
       "      <td>9740.725733</td>\n",
       "      <td>12635.154906</td>\n",
       "      <td>22845.282049</td>\n",
       "      <td>33055.409192</td>\n",
       "      <td>22845.282049</td>\n",
       "      <td>23658.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>TOGO</td>\n",
       "      <td>-1424.443980</td>\n",
       "      <td>-872.031563</td>\n",
       "      <td>1076.608626</td>\n",
       "      <td>3025.248815</td>\n",
       "      <td>1076.608626</td>\n",
       "      <td>1015.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>2023-09-12</td>\n",
       "      <td>TOGO</td>\n",
       "      <td>-1430.390120</td>\n",
       "      <td>-876.664367</td>\n",
       "      <td>1076.608626</td>\n",
       "      <td>3029.881619</td>\n",
       "      <td>1076.608626</td>\n",
       "      <td>6317.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>UNITED STATES</td>\n",
       "      <td>77592.227182</td>\n",
       "      <td>92747.536640</td>\n",
       "      <td>146208.038588</td>\n",
       "      <td>199668.540537</td>\n",
       "      <td>146208.038588</td>\n",
       "      <td>133203.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2023-09-12</td>\n",
       "      <td>UNITED STATES</td>\n",
       "      <td>58071.182331</td>\n",
       "      <td>69515.564646</td>\n",
       "      <td>109885.734899</td>\n",
       "      <td>150255.905152</td>\n",
       "      <td>109885.734899</td>\n",
       "      <td>110713.01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>UNITED STATES (ATM &amp; DEPOSITS)</td>\n",
       "      <td>-4909.051458</td>\n",
       "      <td>-3580.937678</td>\n",
       "      <td>1103.996635</td>\n",
       "      <td>5788.930948</td>\n",
       "      <td>1103.996635</td>\n",
       "      <td>4180.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>74 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         date                         country            p5           p10  \\\n",
       "66 2023-09-11                       ARGENTINA    -19.538956    112.336150   \n",
       "67 2023-09-12                       ARGENTINA    -60.345856     71.557792   \n",
       "10 2023-09-11                      BANGLADESH  -9543.450624  -6645.986391   \n",
       "11 2023-09-12                      BANGLADESH -10651.039454  -7508.939894   \n",
       "8  2023-09-11                         BOLIVIA   9740.725733  12635.154906   \n",
       "..        ...                             ...           ...           ...   \n",
       "54 2023-09-11                            TOGO  -1424.443980   -872.031563   \n",
       "55 2023-09-12                            TOGO  -1430.390120   -876.664367   \n",
       "14 2023-09-11                   UNITED STATES  77592.227182  92747.536640   \n",
       "15 2023-09-12                   UNITED STATES  58071.182331  69515.564646   \n",
       "45 2023-09-11  UNITED STATES (ATM & DEPOSITS)  -4909.051458  -3580.937678   \n",
       "\n",
       "              p50            p90           mean     amount  \n",
       "66     577.526870    1042.717590     577.526870     708.00  \n",
       "67     536.849197    1002.140602     536.849197     130.00  \n",
       "10    3574.846954   13795.680299    3574.846954    7110.00  \n",
       "11    3574.846954   14658.633802    3574.846954     198.00  \n",
       "8    22845.282049   33055.409192   22845.282049   23658.25  \n",
       "..            ...            ...            ...        ...  \n",
       "54    1076.608626    3025.248815    1076.608626    1015.00  \n",
       "55    1076.608626    3029.881619    1076.608626    6317.00  \n",
       "14  146208.038588  199668.540537  146208.038588  133203.87  \n",
       "15  109885.734899  150255.905152  109885.734899  110713.01  \n",
       "45    1103.996635    5788.930948    1103.996635    4180.00  \n",
       "\n",
       "[74 rows x 8 columns]"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_forecast"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "d1c88224-d6fa-431c-bca1-5a2496eba39f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "61620262.76"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_forecast['amount'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 378,
   "id": "716b39c8-ab9e-4833-b669-e5e02126bf4d",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "## MAPE A 1 DÍA POR PAYER##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "id": "6b33d305-9fa9-4e25-a0da-a1f32f01dea5",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "##GENERAMOS EL ERROR DE PRONOSTICO##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "7b592024-f9b8-4b0b-ac57-cd003628456d",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "###MAPE FORECAST A 1 DÍA##\n",
    "forecast_1d=df_forecast.loc[df_forecast['date']=='2023-09-11']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "id": "416e82b2-76db-477b-8cfa-7e36e9518b89",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(37, 8)"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "forecast_1d.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "92f91b0f-85ad-4a88-9567-a7e38da0b919",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>country</th>\n",
       "      <th>p5</th>\n",
       "      <th>p10</th>\n",
       "      <th>p50</th>\n",
       "      <th>p90</th>\n",
       "      <th>mean</th>\n",
       "      <th>amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>ARGENTINA</td>\n",
       "      <td>-19.538956</td>\n",
       "      <td>112.336150</td>\n",
       "      <td>5.775269e+02</td>\n",
       "      <td>1.042718e+03</td>\n",
       "      <td>5.775269e+02</td>\n",
       "      <td>708.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>BANGLADESH</td>\n",
       "      <td>-9543.450624</td>\n",
       "      <td>-6645.986391</td>\n",
       "      <td>3.574847e+03</td>\n",
       "      <td>1.379568e+04</td>\n",
       "      <td>3.574847e+03</td>\n",
       "      <td>7110.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>BOLIVIA</td>\n",
       "      <td>9740.725733</td>\n",
       "      <td>12635.154906</td>\n",
       "      <td>2.284528e+04</td>\n",
       "      <td>3.305541e+04</td>\n",
       "      <td>2.284528e+04</td>\n",
       "      <td>23658.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>BRAZIL</td>\n",
       "      <td>820865.196191</td>\n",
       "      <td>921156.235652</td>\n",
       "      <td>1.274934e+06</td>\n",
       "      <td>1.628711e+06</td>\n",
       "      <td>1.274934e+06</td>\n",
       "      <td>1036520.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>CAMEROON</td>\n",
       "      <td>-187.457224</td>\n",
       "      <td>12.087814</td>\n",
       "      <td>7.159849e+02</td>\n",
       "      <td>1.419882e+03</td>\n",
       "      <td>7.159849e+02</td>\n",
       "      <td>394.94</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date     country             p5            p10           p50  \\\n",
       "66 2023-09-11   ARGENTINA     -19.538956     112.336150  5.775269e+02   \n",
       "10 2023-09-11  BANGLADESH   -9543.450624   -6645.986391  3.574847e+03   \n",
       "8  2023-09-11     BOLIVIA    9740.725733   12635.154906  2.284528e+04   \n",
       "28 2023-09-11      BRAZIL  820865.196191  921156.235652  1.274934e+06   \n",
       "56 2023-09-11    CAMEROON    -187.457224      12.087814  7.159849e+02   \n",
       "\n",
       "             p90          mean      amount  \n",
       "66  1.042718e+03  5.775269e+02      708.00  \n",
       "10  1.379568e+04  3.574847e+03     7110.00  \n",
       "8   3.305541e+04  2.284528e+04    23658.25  \n",
       "28  1.628711e+06  1.274934e+06  1036520.44  \n",
       "56  1.419882e+03  7.159849e+02      394.94  "
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "forecast_1d.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "d8ef9264-0961-4f7a-acc2-729e10a7e5dc",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_200/1224458228.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  forecast_1d[\"pe_p5\"] = abs((forecast_1d.amount - forecast_1d['p5']) / forecast_1d.amount)\n",
      "/tmp/ipykernel_200/1224458228.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  forecast_1d[\"pe_p10\"] = abs((forecast_1d.amount - forecast_1d['p10']) / forecast_1d.amount)\n",
      "/tmp/ipykernel_200/1224458228.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  forecast_1d[\"pe_p50\"] = abs((forecast_1d.amount - forecast_1d['p50']) / forecast_1d.amount)\n"
     ]
    }
   ],
   "source": [
    "forecast_1d[\"pe_p5\"] = abs((forecast_1d.amount - forecast_1d['p5']) / forecast_1d.amount)\n",
    "forecast_1d[\"pe_p10\"] = abs((forecast_1d.amount - forecast_1d['p10']) / forecast_1d.amount)\n",
    "forecast_1d[\"pe_p50\"] = abs((forecast_1d.amount - forecast_1d['p50']) / forecast_1d.amount)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "c113aa89-32e0-4cef-bfb4-2932c4f5230b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0010904203843009996, 3.0471651921309055)"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "forecast_1d.pe_p10.min(), forecast_1d.pe_p10.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "4599551f-b0be-4d27-ac47-3609cd0b4323",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>country</th>\n",
       "      <th>p5</th>\n",
       "      <th>p10</th>\n",
       "      <th>p50</th>\n",
       "      <th>p90</th>\n",
       "      <th>mean</th>\n",
       "      <th>amount</th>\n",
       "      <th>pe_p5</th>\n",
       "      <th>pe_p10</th>\n",
       "      <th>pe_p50</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>ARGENTINA</td>\n",
       "      <td>-19.538956</td>\n",
       "      <td>112.336150</td>\n",
       "      <td>5.775269e+02</td>\n",
       "      <td>1.042718e+03</td>\n",
       "      <td>5.775269e+02</td>\n",
       "      <td>708.00</td>\n",
       "      <td>1.027597</td>\n",
       "      <td>0.841333</td>\n",
       "      <td>0.184284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>BANGLADESH</td>\n",
       "      <td>-9543.450624</td>\n",
       "      <td>-6645.986391</td>\n",
       "      <td>3.574847e+03</td>\n",
       "      <td>1.379568e+04</td>\n",
       "      <td>3.574847e+03</td>\n",
       "      <td>7110.00</td>\n",
       "      <td>2.342257</td>\n",
       "      <td>1.934738</td>\n",
       "      <td>0.497209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>BOLIVIA</td>\n",
       "      <td>9740.725733</td>\n",
       "      <td>12635.154906</td>\n",
       "      <td>2.284528e+04</td>\n",
       "      <td>3.305541e+04</td>\n",
       "      <td>2.284528e+04</td>\n",
       "      <td>23658.25</td>\n",
       "      <td>0.588274</td>\n",
       "      <td>0.465930</td>\n",
       "      <td>0.034363</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>BRAZIL</td>\n",
       "      <td>820865.196191</td>\n",
       "      <td>921156.235652</td>\n",
       "      <td>1.274934e+06</td>\n",
       "      <td>1.628711e+06</td>\n",
       "      <td>1.274934e+06</td>\n",
       "      <td>1036520.44</td>\n",
       "      <td>0.208057</td>\n",
       "      <td>0.111299</td>\n",
       "      <td>0.230013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>CAMEROON</td>\n",
       "      <td>-187.457224</td>\n",
       "      <td>12.087814</td>\n",
       "      <td>7.159849e+02</td>\n",
       "      <td>1.419882e+03</td>\n",
       "      <td>7.159849e+02</td>\n",
       "      <td>394.94</td>\n",
       "      <td>1.474647</td>\n",
       "      <td>0.969393</td>\n",
       "      <td>0.812895</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date     country             p5            p10           p50  \\\n",
       "66 2023-09-11   ARGENTINA     -19.538956     112.336150  5.775269e+02   \n",
       "10 2023-09-11  BANGLADESH   -9543.450624   -6645.986391  3.574847e+03   \n",
       "8  2023-09-11     BOLIVIA    9740.725733   12635.154906  2.284528e+04   \n",
       "28 2023-09-11      BRAZIL  820865.196191  921156.235652  1.274934e+06   \n",
       "56 2023-09-11    CAMEROON    -187.457224      12.087814  7.159849e+02   \n",
       "\n",
       "             p90          mean      amount     pe_p5    pe_p10    pe_p50  \n",
       "66  1.042718e+03  5.775269e+02      708.00  1.027597  0.841333  0.184284  \n",
       "10  1.379568e+04  3.574847e+03     7110.00  2.342257  1.934738  0.497209  \n",
       "8   3.305541e+04  2.284528e+04    23658.25  0.588274  0.465930  0.034363  \n",
       "28  1.628711e+06  1.274934e+06  1036520.44  0.208057  0.111299  0.230013  \n",
       "56  1.419882e+03  7.159849e+02      394.94  1.474647  0.969393  0.812895  "
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "forecast_1d.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "id": "95de0d1d-45b9-45d5-87b7-feea1e1b5422",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>country</th>\n",
       "      <th>p5</th>\n",
       "      <th>p10</th>\n",
       "      <th>p50</th>\n",
       "      <th>p90</th>\n",
       "      <th>mean</th>\n",
       "      <th>amount</th>\n",
       "      <th>pe_p5</th>\n",
       "      <th>pe_p10</th>\n",
       "      <th>pe_p50</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>MEXICO</td>\n",
       "      <td>1.729349e+07</td>\n",
       "      <td>1.820240e+07</td>\n",
       "      <td>2.140862e+07</td>\n",
       "      <td>2.461483e+07</td>\n",
       "      <td>2.140862e+07</td>\n",
       "      <td>17073946.44</td>\n",
       "      <td>0.012858</td>\n",
       "      <td>0.066092</td>\n",
       "      <td>0.253876</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>GUATEMALA</td>\n",
       "      <td>7.179732e+06</td>\n",
       "      <td>7.555193e+06</td>\n",
       "      <td>8.879634e+06</td>\n",
       "      <td>1.020407e+07</td>\n",
       "      <td>8.879634e+06</td>\n",
       "      <td>8533950.40</td>\n",
       "      <td>0.158686</td>\n",
       "      <td>0.114690</td>\n",
       "      <td>0.040507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>HONDURAS</td>\n",
       "      <td>1.733782e+06</td>\n",
       "      <td>1.835442e+06</td>\n",
       "      <td>2.194051e+06</td>\n",
       "      <td>2.552660e+06</td>\n",
       "      <td>2.194051e+06</td>\n",
       "      <td>2004103.16</td>\n",
       "      <td>0.134884</td>\n",
       "      <td>0.084158</td>\n",
       "      <td>0.094779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>EL SALVADOR</td>\n",
       "      <td>1.300739e+06</td>\n",
       "      <td>1.377954e+06</td>\n",
       "      <td>1.650330e+06</td>\n",
       "      <td>1.922707e+06</td>\n",
       "      <td>1.650330e+06</td>\n",
       "      <td>1617551.24</td>\n",
       "      <td>0.195859</td>\n",
       "      <td>0.148124</td>\n",
       "      <td>0.020265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>BRAZIL</td>\n",
       "      <td>8.208652e+05</td>\n",
       "      <td>9.211562e+05</td>\n",
       "      <td>1.274934e+06</td>\n",
       "      <td>1.628711e+06</td>\n",
       "      <td>1.274934e+06</td>\n",
       "      <td>1036520.44</td>\n",
       "      <td>0.208057</td>\n",
       "      <td>0.111299</td>\n",
       "      <td>0.230013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>PHILIPPINES</td>\n",
       "      <td>6.262284e+05</td>\n",
       "      <td>6.986629e+05</td>\n",
       "      <td>9.541763e+05</td>\n",
       "      <td>1.209690e+06</td>\n",
       "      <td>9.541763e+05</td>\n",
       "      <td>897989.65</td>\n",
       "      <td>0.302633</td>\n",
       "      <td>0.221970</td>\n",
       "      <td>0.062569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>NICARAGUA</td>\n",
       "      <td>5.266843e+05</td>\n",
       "      <td>5.744283e+05</td>\n",
       "      <td>7.428459e+05</td>\n",
       "      <td>9.112635e+05</td>\n",
       "      <td>7.428459e+05</td>\n",
       "      <td>753399.65</td>\n",
       "      <td>0.300923</td>\n",
       "      <td>0.237552</td>\n",
       "      <td>0.014008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>COLOMBIA</td>\n",
       "      <td>5.344653e+05</td>\n",
       "      <td>5.874710e+05</td>\n",
       "      <td>7.744492e+05</td>\n",
       "      <td>9.614273e+05</td>\n",
       "      <td>7.744492e+05</td>\n",
       "      <td>719226.07</td>\n",
       "      <td>0.256888</td>\n",
       "      <td>0.183190</td>\n",
       "      <td>0.076781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>ECUADOR</td>\n",
       "      <td>5.104726e+05</td>\n",
       "      <td>5.513105e+05</td>\n",
       "      <td>6.953665e+05</td>\n",
       "      <td>8.394225e+05</td>\n",
       "      <td>6.953665e+05</td>\n",
       "      <td>693709.73</td>\n",
       "      <td>0.264141</td>\n",
       "      <td>0.205272</td>\n",
       "      <td>0.002388</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2023-09-11</td>\n",
       "      <td>DOMINICAN REPUBLIC</td>\n",
       "      <td>3.641281e+05</td>\n",
       "      <td>3.904265e+05</td>\n",
       "      <td>4.831944e+05</td>\n",
       "      <td>5.759623e+05</td>\n",
       "      <td>4.831944e+05</td>\n",
       "      <td>500760.23</td>\n",
       "      <td>0.272849</td>\n",
       "      <td>0.220332</td>\n",
       "      <td>0.035078</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date             country            p5           p10           p50  \\\n",
       "62 2023-09-11              MEXICO  1.729349e+07  1.820240e+07  2.140862e+07   \n",
       "3  2023-09-11           GUATEMALA  7.179732e+06  7.555193e+06  8.879634e+06   \n",
       "18 2023-09-11            HONDURAS  1.733782e+06  1.835442e+06  2.194051e+06   \n",
       "33 2023-09-11         EL SALVADOR  1.300739e+06  1.377954e+06  1.650330e+06   \n",
       "28 2023-09-11              BRAZIL  8.208652e+05  9.211562e+05  1.274934e+06   \n",
       "0  2023-09-11         PHILIPPINES  6.262284e+05  6.986629e+05  9.541763e+05   \n",
       "39 2023-09-11           NICARAGUA  5.266843e+05  5.744283e+05  7.428459e+05   \n",
       "12 2023-09-11            COLOMBIA  5.344653e+05  5.874710e+05  7.744492e+05   \n",
       "68 2023-09-11             ECUADOR  5.104726e+05  5.513105e+05  6.953665e+05   \n",
       "22 2023-09-11  DOMINICAN REPUBLIC  3.641281e+05  3.904265e+05  4.831944e+05   \n",
       "\n",
       "             p90          mean       amount     pe_p5    pe_p10    pe_p50  \n",
       "62  2.461483e+07  2.140862e+07  17073946.44  0.012858  0.066092  0.253876  \n",
       "3   1.020407e+07  8.879634e+06   8533950.40  0.158686  0.114690  0.040507  \n",
       "18  2.552660e+06  2.194051e+06   2004103.16  0.134884  0.084158  0.094779  \n",
       "33  1.922707e+06  1.650330e+06   1617551.24  0.195859  0.148124  0.020265  \n",
       "28  1.628711e+06  1.274934e+06   1036520.44  0.208057  0.111299  0.230013  \n",
       "0   1.209690e+06  9.541763e+05    897989.65  0.302633  0.221970  0.062569  \n",
       "39  9.112635e+05  7.428459e+05    753399.65  0.300923  0.237552  0.014008  \n",
       "12  9.614273e+05  7.744492e+05    719226.07  0.256888  0.183190  0.076781  \n",
       "68  8.394225e+05  6.953665e+05    693709.73  0.264141  0.205272  0.002388  \n",
       "22  5.759623e+05  4.831944e+05    500760.23  0.272849  0.220332  0.035078  "
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "forecast_1d.sort_values('amount', ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "5193b25c-7ef8-4975-9090-dda3c370cac4",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8062749440635856"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##MAPE PROMEDIO A 1 D (para los que tienen MAPE definido)\n",
    "forecast_1d.pe_p5.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "id": "3b74d191-4972-4ba7-9f9e-e3159d24f302",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6241058768880638"
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "forecast_1d.pe_p10.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "2378fa58-950d-4e8a-b196-95d510e4fec9",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.38602388221962386"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "forecast_1d.pe_p50.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "id": "524758db-b3e7-4059-a139-05f1af93a7c8",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.15621381778885637\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_200/3403784869.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  forecast_1d[\"ae\"] = abs((forecast_1d.amount - forecast_1d['mean']))\n"
     ]
    }
   ],
   "source": [
    "##WAPE A 1 DÍA GENERAL##\n",
    "forecast_1d[\"ae\"] = abs((forecast_1d.amount - forecast_1d['mean']))\n",
    "print(forecast_1d.ae.sum() / forecast_1d.amount.sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "id": "483602bb-e9ed-4fc2-bb2f-3e340739c984",
   "metadata": {},
   "outputs": [],
   "source": [
    "##WAPE POR PAÍSES##"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "d548518c-8140-4099-b954-492cbca987ef",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "wape_country_f1d = forecast_1d.groupby('country').apply(lambda x: (x['ae'].sum() / x['amount'].sum())).reset_index(name='wape')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "ef02ba0e-5b39-4adf-a952-49cf520824e7",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_core.py:1225: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_core.py:1225: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n",
      "/opt/conda/lib/python3.10/site-packages/seaborn/_core.py:1225: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n",
      "  if pd.api.types.is_categorical_dtype(vector):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x1600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "wape_country_f1d.sort_values('wape', inplace=True, ascending=False)\n",
    "\n",
    "# Crear el gráfico de barras con seaborn\n",
    "plt.figure(figsize=(20,16))\n",
    "bar_plot = sns.barplot(x='wape', y='country', data=wape_country_f1d, palette='viridis')\n",
    "\n",
    "# Ajustar el tamaño de las letras\n",
    "plt.xlabel('WAPE', fontsize=12)\n",
    "plt.ylabel('Country', fontsize=12)\n",
    "plt.title('WAPE by country 1d', fontsize=14)\n",
    "\n",
    "# Mostrar los valores de MAPE sobre las barras\n",
    "for index, value in enumerate(wape_country_f1d['wape']):\n",
    "    bar_plot.text(value, index, f'{value:.2f}', color='black', ha=\"left\", va=\"center\", fontsize=10)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "fe7040b5-d33a-485d-a304-ba7bd0faf150",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "##MAPE A 2 DIAS##\n",
    "###MAPE FORECAST A 2 DÍAS##\n",
    "forecast_2d=df_forecast.loc[df_forecast.date<='2023-09-12']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "0ae12031-84ef-47db-99cd-a69af5be8360",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(Timestamp('2023-09-11 00:00:00'), Timestamp('2023-09-12 00:00:00'))"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "forecast_2d.date.min(),forecast_2d.date.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "id": "5cb4ee13-5cd1-4ee8-be29-b77c693071a9",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.5000361913266684"
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##MAPE PROMEDIO A 2 D (para los que tienen MAPE definido)\n",
    "forecast_2d[\"pe_p5\"] = abs((forecast_2d.amount - forecast_2d['p5']) / forecast_2d.amount)\n",
    "forecast_2d.pe_p5.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "id": "abd08d94-e0d2-471a-b78a-b78caf10da4c",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.1224341872744876"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##MAPE PROMEDIO A 2 D (para los que tienen MAPE definido)\n",
    "forecast_2d[\"pe_p10\"] = abs((forecast_2d.amount - forecast_2d['p10']) / forecast_2d.amount)\n",
    "forecast_2d.pe_p10.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "id": "c8ff51d0-62e7-4739-bcbb-a7b7473414ff",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7269643850508037"
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##MAPE PROMEDIO A 2 D (para los que tienen MAPE definido)\n",
    "forecast_2d[\"pe_p50\"] = abs((forecast_2d.amount - forecast_2d['p50']) / forecast_2d.amount)\n",
    "forecast_2d.pe_p50.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "id": "83f49e3d-3bd2-4d3a-842e-320abcc03335",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.1689785762379875\n"
     ]
    }
   ],
   "source": [
    "##WAPE A 2 DÍAS GENERAL##\n",
    "forecast_2d[\"ae\"] = abs((forecast_2d.amount - forecast_2d['mean']))\n",
    "print(forecast_2d.ae.sum() / forecast_2d.amount.sum())"
   ]
  }
 ],
 "metadata": {
  "availableInstances": [
   {
    "_defaultOrder": 0,
    "_isFastLaunch": true,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 4,
    "name": "ml.t3.medium",
    "vcpuNum": 2
   },
   {
    "_defaultOrder": 1,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 8,
    "name": "ml.t3.large",
    "vcpuNum": 2
   },
   {
    "_defaultOrder": 2,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 16,
    "name": "ml.t3.xlarge",
    "vcpuNum": 4
   },
   {
    "_defaultOrder": 3,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 32,
    "name": "ml.t3.2xlarge",
    "vcpuNum": 8
   },
   {
    "_defaultOrder": 4,
    "_isFastLaunch": true,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 8,
    "name": "ml.m5.large",
    "vcpuNum": 2
   },
   {
    "_defaultOrder": 5,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 16,
    "name": "ml.m5.xlarge",
    "vcpuNum": 4
   },
   {
    "_defaultOrder": 6,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 32,
    "name": "ml.m5.2xlarge",
    "vcpuNum": 8
   },
   {
    "_defaultOrder": 7,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 64,
    "name": "ml.m5.4xlarge",
    "vcpuNum": 16
   },
   {
    "_defaultOrder": 8,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 128,
    "name": "ml.m5.8xlarge",
    "vcpuNum": 32
   },
   {
    "_defaultOrder": 9,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 192,
    "name": "ml.m5.12xlarge",
    "vcpuNum": 48
   },
   {
    "_defaultOrder": 10,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 256,
    "name": "ml.m5.16xlarge",
    "vcpuNum": 64
   },
   {
    "_defaultOrder": 11,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 384,
    "name": "ml.m5.24xlarge",
    "vcpuNum": 96
   },
   {
    "_defaultOrder": 12,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 8,
    "name": "ml.m5d.large",
    "vcpuNum": 2
   },
   {
    "_defaultOrder": 13,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 16,
    "name": "ml.m5d.xlarge",
    "vcpuNum": 4
   },
   {
    "_defaultOrder": 14,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 32,
    "name": "ml.m5d.2xlarge",
    "vcpuNum": 8
   },
   {
    "_defaultOrder": 15,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 64,
    "name": "ml.m5d.4xlarge",
    "vcpuNum": 16
   },
   {
    "_defaultOrder": 16,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 128,
    "name": "ml.m5d.8xlarge",
    "vcpuNum": 32
   },
   {
    "_defaultOrder": 17,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 192,
    "name": "ml.m5d.12xlarge",
    "vcpuNum": 48
   },
   {
    "_defaultOrder": 18,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 256,
    "name": "ml.m5d.16xlarge",
    "vcpuNum": 64
   },
   {
    "_defaultOrder": 19,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 384,
    "name": "ml.m5d.24xlarge",
    "vcpuNum": 96
   },
   {
    "_defaultOrder": 20,
    "_isFastLaunch": false,
    "category": "General purpose",
    "gpuNum": 0,
    "hideHardwareSpecs": true,
    "memoryGiB": 0,
    "name": "ml.geospatial.interactive",
    "supportedImageNames": [
     "sagemaker-geospatial-v1-0"
    ],
    "vcpuNum": 0
   },
   {
    "_defaultOrder": 21,
    "_isFastLaunch": true,
    "category": "Compute optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 4,
    "name": "ml.c5.large",
    "vcpuNum": 2
   },
   {
    "_defaultOrder": 22,
    "_isFastLaunch": false,
    "category": "Compute optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 8,
    "name": "ml.c5.xlarge",
    "vcpuNum": 4
   },
   {
    "_defaultOrder": 23,
    "_isFastLaunch": false,
    "category": "Compute optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 16,
    "name": "ml.c5.2xlarge",
    "vcpuNum": 8
   },
   {
    "_defaultOrder": 24,
    "_isFastLaunch": false,
    "category": "Compute optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 32,
    "name": "ml.c5.4xlarge",
    "vcpuNum": 16
   },
   {
    "_defaultOrder": 25,
    "_isFastLaunch": false,
    "category": "Compute optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 72,
    "name": "ml.c5.9xlarge",
    "vcpuNum": 36
   },
   {
    "_defaultOrder": 26,
    "_isFastLaunch": false,
    "category": "Compute optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 96,
    "name": "ml.c5.12xlarge",
    "vcpuNum": 48
   },
   {
    "_defaultOrder": 27,
    "_isFastLaunch": false,
    "category": "Compute optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 144,
    "name": "ml.c5.18xlarge",
    "vcpuNum": 72
   },
   {
    "_defaultOrder": 28,
    "_isFastLaunch": false,
    "category": "Compute optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 192,
    "name": "ml.c5.24xlarge",
    "vcpuNum": 96
   },
   {
    "_defaultOrder": 29,
    "_isFastLaunch": true,
    "category": "Accelerated computing",
    "gpuNum": 1,
    "hideHardwareSpecs": false,
    "memoryGiB": 16,
    "name": "ml.g4dn.xlarge",
    "vcpuNum": 4
   },
   {
    "_defaultOrder": 30,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 1,
    "hideHardwareSpecs": false,
    "memoryGiB": 32,
    "name": "ml.g4dn.2xlarge",
    "vcpuNum": 8
   },
   {
    "_defaultOrder": 31,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 1,
    "hideHardwareSpecs": false,
    "memoryGiB": 64,
    "name": "ml.g4dn.4xlarge",
    "vcpuNum": 16
   },
   {
    "_defaultOrder": 32,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 1,
    "hideHardwareSpecs": false,
    "memoryGiB": 128,
    "name": "ml.g4dn.8xlarge",
    "vcpuNum": 32
   },
   {
    "_defaultOrder": 33,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 4,
    "hideHardwareSpecs": false,
    "memoryGiB": 192,
    "name": "ml.g4dn.12xlarge",
    "vcpuNum": 48
   },
   {
    "_defaultOrder": 34,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 1,
    "hideHardwareSpecs": false,
    "memoryGiB": 256,
    "name": "ml.g4dn.16xlarge",
    "vcpuNum": 64
   },
   {
    "_defaultOrder": 35,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 1,
    "hideHardwareSpecs": false,
    "memoryGiB": 61,
    "name": "ml.p3.2xlarge",
    "vcpuNum": 8
   },
   {
    "_defaultOrder": 36,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 4,
    "hideHardwareSpecs": false,
    "memoryGiB": 244,
    "name": "ml.p3.8xlarge",
    "vcpuNum": 32
   },
   {
    "_defaultOrder": 37,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 8,
    "hideHardwareSpecs": false,
    "memoryGiB": 488,
    "name": "ml.p3.16xlarge",
    "vcpuNum": 64
   },
   {
    "_defaultOrder": 38,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 8,
    "hideHardwareSpecs": false,
    "memoryGiB": 768,
    "name": "ml.p3dn.24xlarge",
    "vcpuNum": 96
   },
   {
    "_defaultOrder": 39,
    "_isFastLaunch": false,
    "category": "Memory Optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 16,
    "name": "ml.r5.large",
    "vcpuNum": 2
   },
   {
    "_defaultOrder": 40,
    "_isFastLaunch": false,
    "category": "Memory Optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 32,
    "name": "ml.r5.xlarge",
    "vcpuNum": 4
   },
   {
    "_defaultOrder": 41,
    "_isFastLaunch": false,
    "category": "Memory Optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 64,
    "name": "ml.r5.2xlarge",
    "vcpuNum": 8
   },
   {
    "_defaultOrder": 42,
    "_isFastLaunch": false,
    "category": "Memory Optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 128,
    "name": "ml.r5.4xlarge",
    "vcpuNum": 16
   },
   {
    "_defaultOrder": 43,
    "_isFastLaunch": false,
    "category": "Memory Optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 256,
    "name": "ml.r5.8xlarge",
    "vcpuNum": 32
   },
   {
    "_defaultOrder": 44,
    "_isFastLaunch": false,
    "category": "Memory Optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 384,
    "name": "ml.r5.12xlarge",
    "vcpuNum": 48
   },
   {
    "_defaultOrder": 45,
    "_isFastLaunch": false,
    "category": "Memory Optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 512,
    "name": "ml.r5.16xlarge",
    "vcpuNum": 64
   },
   {
    "_defaultOrder": 46,
    "_isFastLaunch": false,
    "category": "Memory Optimized",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 768,
    "name": "ml.r5.24xlarge",
    "vcpuNum": 96
   },
   {
    "_defaultOrder": 47,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 1,
    "hideHardwareSpecs": false,
    "memoryGiB": 16,
    "name": "ml.g5.xlarge",
    "vcpuNum": 4
   },
   {
    "_defaultOrder": 48,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 1,
    "hideHardwareSpecs": false,
    "memoryGiB": 32,
    "name": "ml.g5.2xlarge",
    "vcpuNum": 8
   },
   {
    "_defaultOrder": 49,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 1,
    "hideHardwareSpecs": false,
    "memoryGiB": 64,
    "name": "ml.g5.4xlarge",
    "vcpuNum": 16
   },
   {
    "_defaultOrder": 50,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 1,
    "hideHardwareSpecs": false,
    "memoryGiB": 128,
    "name": "ml.g5.8xlarge",
    "vcpuNum": 32
   },
   {
    "_defaultOrder": 51,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 1,
    "hideHardwareSpecs": false,
    "memoryGiB": 256,
    "name": "ml.g5.16xlarge",
    "vcpuNum": 64
   },
   {
    "_defaultOrder": 52,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 4,
    "hideHardwareSpecs": false,
    "memoryGiB": 192,
    "name": "ml.g5.12xlarge",
    "vcpuNum": 48
   },
   {
    "_defaultOrder": 53,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 4,
    "hideHardwareSpecs": false,
    "memoryGiB": 384,
    "name": "ml.g5.24xlarge",
    "vcpuNum": 96
   },
   {
    "_defaultOrder": 54,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 8,
    "hideHardwareSpecs": false,
    "memoryGiB": 768,
    "name": "ml.g5.48xlarge",
    "vcpuNum": 192
   },
   {
    "_defaultOrder": 55,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 8,
    "hideHardwareSpecs": false,
    "memoryGiB": 1152,
    "name": "ml.p4d.24xlarge",
    "vcpuNum": 96
   },
   {
    "_defaultOrder": 56,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 8,
    "hideHardwareSpecs": false,
    "memoryGiB": 1152,
    "name": "ml.p4de.24xlarge",
    "vcpuNum": 96
   },
   {
    "_defaultOrder": 57,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 32,
    "name": "ml.trn1.2xlarge",
    "vcpuNum": 8
   },
   {
    "_defaultOrder": 58,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 512,
    "name": "ml.trn1.32xlarge",
    "vcpuNum": 128
   },
   {
    "_defaultOrder": 59,
    "_isFastLaunch": false,
    "category": "Accelerated computing",
    "gpuNum": 0,
    "hideHardwareSpecs": false,
    "memoryGiB": 512,
    "name": "ml.trn1n.32xlarge",
    "vcpuNum": 128
   }
  ],
  "kernelspec": {
   "display_name": "Python 3 (Data Science 3.0)",
   "language": "python",
   "name": "python3__SAGEMAKER_INTERNAL__arn:aws:sagemaker:us-east-1:081325390199:image/sagemaker-data-science-310-v1"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
